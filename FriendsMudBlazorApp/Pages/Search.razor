@page "/search/{searchTerm}"
@attribute [Authorize]
@layout AuthLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<RightDrawer />
<SearchBar />

<MudContainer Style="padding-top: 64px; padding-right: 200px">
    @if (users != null && users.Any())
    {
        foreach (var user in users)
        {
            <MudCard Style="margin-bottom: 20px;">
                <MudCardContent>
                    <MudText Typo="Typo.h6">@user.FirstName @user.LastName</MudText>
                    <MudText Typo="Typo.subtitle1">@user.Username</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" OnClick="@(() => GoToProfile(user.Username))">View Profile</MudButton>
                </MudCardActions>
            </MudCard>
            <MudDivider />
        }
    } else
    {
        <MudText Typo="Typo.h6">No users found.</MudText>
    }
    </MudContainer>

    @code {
    [Parameter]
    public string SearchTerm { get; set; }

    private List<UserProfile> users;

    // This method runs when the component is first initialized and when the SearchTerm parameter changes.
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            await LoadUsers(SearchTerm);
        }
    }

    private async Task LoadUsers(string searchTerm)
    {
        string url = $"http://localhost:8000/profile/search/{searchTerm}";

        // Retrieve the bearer token from local storage
        var token = await LocalStorage.GetItemAsync<string>("token");

        // Create the request message with the required headers
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, url);
        if (!string.IsNullOrEmpty(token))
        {
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }

        // Send the request and get the response
        var response = await Http.SendAsync(requestMessage);

        if (response.IsSuccessStatusCode)
        {
            // Read the response as JSON and deserialize it to the List<UserProfile> type
            users = await response.Content.ReadFromJsonAsync<List<UserProfile>>();
        } else
        {
            users = new List<UserProfile>();
            // Optionally, handle different HTTP status codes or errors here
        }

        // Request the UI to be re-rendered
        StateHasChanged();
    }


    public class UserProfile
    {
        public string Username { get; set; }
        public string UserId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

    private void GoToProfile(string userId)
    {
        Navigation.NavigateTo($"/profile/{userId}");
    }
}
