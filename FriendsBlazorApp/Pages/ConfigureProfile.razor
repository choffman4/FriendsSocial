@page "/ConfigureProfile"
@using FriendsBlazorApp.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.IdentityModel.Tokens.Jwt


@using System.Text
@using System.Text.Json
<h3>Configure Your Profile</h3>

<EditForm Model="@profileModel" OnValidSubmit="@HandleConfigureProfile">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Username">Username:</label>
        <InputText id="Username" @bind-Value="profileModel.Username" class="form-control" />
    </div>

    <div class="form-group">
        <label for="FirstName">First Name:</label>
        <InputText id="FirstName" @bind-Value="profileModel.FirstName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="LastName">Last Name:</label>
        <InputText id="LastName" @bind-Value="profileModel.LastName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="Bio">Bio:</label>
        <InputTextArea id="Bio" @bind-Value="profileModel.Bio" class="form-control" />
    </div>

    <div class="form-group">
        <label for="HomeTown">HomeTown:</label>
        <InputText id="HomeTown" @bind-Value="profileModel.HomeTown" class="form-control" />
    </div>

    <div class="form-group">
        <label for="Occupation">Occupation:</label>
        <InputText id="Occupation" @bind-Value="profileModel.Occupation" class="form-control" />
    </div>

    <div class="form-group">
        <label for="ExternalLink">External Link:</label>
        <InputText id="ExternalLink" @bind-Value="profileModel.ExternalLink" class="form-control" />
    </div>

    <div class="form-group">
        <label for="DateOfBirth">Date of Birth:</label>
        <InputDate id="DateOfBirth" @bind-Value="tempTime" class="form-control" />
    </div>


    <button type="submit" class="btn btn-primary">Save Profile</button>
</EditForm>

@code {
    private FriendsBlazorApp.Models.ConfigureProfile profileModel = new FriendsBlazorApp.Models.ConfigureProfile();
    private DateTime tempTime;

    private async Task HandleConfigureProfile()
    {
        var apiUrl = "http://localhost:8002/profile/update";

        var token = await GetTokenFromLocalStorageAsync();
        var guid = ExtractGuidFromToken(token);

        profileModel.Guid = guid;
        profileModel.DateOfBirth = tempTime.ToString("MM/dd/yyyy");

        try
        {
            var response = await Http.PostAsJsonAsync(apiUrl, profileModel);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Profile for {profileModel.FirstName} {profileModel.LastName} successfully saved to the API!");
            } else
            {
                Console.WriteLine($"Error saving profile: {response.ReasonPhrase}");
            }
        } catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    private async Task<string> GetTokenFromLocalStorageAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string>("blazorLocalStorage.getItem", "jwtToken");
        } catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving token from local storage: {ex.Message}");
            return null;
        }
    }


    private string ExtractGuidFromToken(string token)
    {
        var jwtHandler = new JwtSecurityTokenHandler();
        var jwtToken = jwtHandler.ReadJwtToken(token);

        // Assuming the GUID is stored in a claim. Adjust accordingly.
        var guidClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "nameid");

        return guidClaim?.Value;
    }

}
