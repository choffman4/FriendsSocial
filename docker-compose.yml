version: '3.8'

networks:
  friends:
    external: false

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2182
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - friends

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - friends
    depends_on:
      - zookeeper
    restart: always
    environment:
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2182
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL

  mysql:
    image: mysql:8.0
    container_name: mysql_user_accounts
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: user_accounts_database
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql   # Mount SQL script
    ports:
      - "3307:3306"
    networks:
      - friends

  mongo:
    image: mongo:latest
    container_name: mongodb_service
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: mongodb
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro  # Mount MongoDB initialization script
    ports:
      - "27018:27017"
    networks:
      - friends

  grpc-user-service:
    build:
      context: ./GrpcUserService
      dockerfile: Dockerfile
    container_name: grpc_user_service
    ports:
      - "8080:80"
    depends_on: 
        - kafka
    networks:
      - friends

  user-account-service-api:
    build:
      context: ./UserAccountService
      dockerfile: Dockerfile
    container_name: user_account_service_api
    ports:
      - "8000:80"
    networks:
      - friends

  grpc-mongo-service:
    build:
      context: ./GrpcMongoService
      dockerfile: Dockerfile
    container_name: grpc_mongo_service
    ports:
      - "8001:80"
    depends_on:
      - kafka
    networks:
      - friends

volumes:
  mysql_data:
  mongo_data:
